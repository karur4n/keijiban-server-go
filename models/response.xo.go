// Package models contains the types for schema 'go_keijiban'.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"errors"
	"time"
)

// Response represents a row from 'go_keijiban.responses'.
type Response struct {
	ID       string    `json:"id"`        // id
	Author   string    `json:"author"`    // author
	AuthorID string    `json:"author_id"` // author_id
	Body     string    `json:"body"`      // body
	PostedAt time.Time `json:"posted_at"` // posted_at
	ThreadID string    `json:"thread_id"` // thread_id

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the Response exists in the database.
func (r *Response) Exists() bool {
	return r._exists
}

// Deleted provides information if the Response has been deleted from the database.
func (r *Response) Deleted() bool {
	return r._deleted
}

// Insert inserts the Response to the database.
func (r *Response) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if r._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key must be provided
	const sqlstr = `INSERT INTO go_keijiban.responses (` +
		`id, author, author_id, body, posted_at, thread_id` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, r.ID, r.Author, r.AuthorID, r.Body, r.PostedAt, r.ThreadID)
	_, err = db.Exec(sqlstr, r.ID, r.Author, r.AuthorID, r.Body, r.PostedAt, r.ThreadID)
	if err != nil {
		return err
	}

	// set existence
	r._exists = true

	return nil
}

// Update updates the Response in the database.
func (r *Response) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !r._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if r._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE go_keijiban.responses SET ` +
		`author = ?, author_id = ?, body = ?, posted_at = ?, thread_id = ?` +
		` WHERE id = ?`

	// run query
	XOLog(sqlstr, r.Author, r.AuthorID, r.Body, r.PostedAt, r.ThreadID, r.ID)
	_, err = db.Exec(sqlstr, r.Author, r.AuthorID, r.Body, r.PostedAt, r.ThreadID, r.ID)
	return err
}

// Save saves the Response to the database.
func (r *Response) Save(db XODB) error {
	if r.Exists() {
		return r.Update(db)
	}

	return r.Insert(db)
}

// Delete deletes the Response from the database.
func (r *Response) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !r._exists {
		return nil
	}

	// if deleted, bail
	if r._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM go_keijiban.responses WHERE id = ?`

	// run query
	XOLog(sqlstr, r.ID)
	_, err = db.Exec(sqlstr, r.ID)
	if err != nil {
		return err
	}

	// set deleted
	r._deleted = true

	return nil
}

// Thread returns the Thread associated with the Response's ThreadID (thread_id).
//
// Generated from foreign key 'responses_ibfk_1'.
func (r *Response) Thread(db XODB) (*Thread, error) {
	return ThreadByID(db, r.ThreadID)
}

// ResponseByID retrieves a row from 'go_keijiban.responses' as a Response.
//
// Generated from index 'responses_id_pkey'.
func ResponseByID(db XODB, id string) (*Response, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, author, author_id, body, posted_at, thread_id ` +
		`FROM go_keijiban.responses ` +
		`WHERE id = ?`

	// run query
	XOLog(sqlstr, id)
	r := Response{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&r.ID, &r.Author, &r.AuthorID, &r.Body, &r.PostedAt, &r.ThreadID)
	if err != nil {
		return nil, err
	}

	return &r, nil
}

// ResponsesByThreadID retrieves a row from 'go_keijiban.responses' as a Response.
//
// Generated from index 'thread_id'.
func ResponsesByThreadID(db XODB, threadID string) ([]*Response, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, author, author_id, body, posted_at, thread_id ` +
		`FROM go_keijiban.responses ` +
		`WHERE thread_id = ?`

	// run query
	XOLog(sqlstr, threadID)
	q, err := db.Query(sqlstr, threadID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*Response{}
	for q.Next() {
		r := Response{
			_exists: true,
		}

		// scan
		err = q.Scan(&r.ID, &r.Author, &r.AuthorID, &r.Body, &r.PostedAt, &r.ThreadID)
		if err != nil {
			return nil, err
		}

		res = append(res, &r)
	}

	return res, nil
}
