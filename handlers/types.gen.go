// Package openapi provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package handlers

import (
	"fmt"
	"net/http"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// スレッド一覧を取得する
	// (GET /threads)
	GetThreads(ctx echo.Context) error
	// スレッドを投稿する
	// (POST /threads)
	PostThreads(ctx echo.Context) error
	// スレッドを取得する
	// (GET /threads/{threadId})
	GetThreadsThreadId(ctx echo.Context, threadId string) error
	// スレッドのレスポンスを投稿する
	// (POST /threads/{threadId}/responses)
	PostThreadsThreadIdResponses(ctx echo.Context, threadId string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetThreads converts echo context to params.
func (w *ServerInterfaceWrapper) GetThreads(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetThreads(ctx)
	return err
}

// PostThreads converts echo context to params.
func (w *ServerInterfaceWrapper) PostThreads(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostThreads(ctx)
	return err
}

// GetThreadsThreadId converts echo context to params.
func (w *ServerInterfaceWrapper) GetThreadsThreadId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "threadId" -------------
	var threadId string

	err = runtime.BindStyledParameter("simple", false, "threadId", ctx.Param("threadId"), &threadId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter threadId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetThreadsThreadId(ctx, threadId)
	return err
}

// PostThreadsThreadIdResponses converts echo context to params.
func (w *ServerInterfaceWrapper) PostThreadsThreadIdResponses(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "threadId" -------------
	var threadId string

	err = runtime.BindStyledParameter("simple", false, "threadId", ctx.Param("threadId"), &threadId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter threadId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostThreadsThreadIdResponses(ctx, threadId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET("/threads", wrapper.GetThreads)
	router.POST("/threads", wrapper.PostThreads)
	router.GET("/threads/:threadId", wrapper.GetThreadsThreadId)
	router.POST("/threads/:threadId/responses", wrapper.PostThreadsThreadIdResponses)

}

